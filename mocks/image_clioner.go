// Code generated by MockGen. DO NOT EDIT.
// Source: ./imagecloner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	name "github.com/google/go-containerregistry/pkg/name"
	reflect "reflect"
)

// MockCloner is a mock of Cloner interface
type MockCloner struct {
	ctrl     *gomock.Controller
	recorder *MockClonerMockRecorder
}

// MockClonerMockRecorder is the mock recorder for MockCloner
type MockClonerMockRecorder struct {
	mock *MockCloner
}

// NewMockCloner creates a new mock instance
func NewMockCloner(ctrl *gomock.Controller) *MockCloner {
	mock := &MockCloner{ctrl: ctrl}
	mock.recorder = &MockClonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloner) EXPECT() *MockClonerMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockCloner) Clone(ctx context.Context, sourceImage, targetImage name.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, sourceImage, targetImage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockClonerMockRecorder) Clone(ctx, sourceImage, targetImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockCloner)(nil).Clone), ctx, sourceImage, targetImage)
}

// IsExistInClones mocks base method
func (m *MockCloner) IsExistInClones(ctx context.Context, targetImage name.Reference) (error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistInClones", ctx, targetImage)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsExistInClones indicates an expected call of IsExistInClones
func (mr *MockClonerMockRecorder) IsExistInClones(ctx, targetImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistInClones", reflect.TypeOf((*MockCloner)(nil).IsExistInClones), ctx, targetImage)
}
